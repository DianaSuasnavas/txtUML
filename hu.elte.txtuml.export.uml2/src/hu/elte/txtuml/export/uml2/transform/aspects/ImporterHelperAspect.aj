package hu.elte.txtuml.export.uml2.transform.aspects;



import hu.elte.txtuml.api.ModelElement;

import java.lang.reflect.Method;
import java.util.LinkedList;

import org.aspectj.lang.annotation.SuppressAjWarnings;

public privileged aspect ImporterHelperAspect extends AbstractImporterAspect {
	

	@SuppressAjWarnings
	Object around() : call(* (!ModelElement+).*(..)) && !call(* (java.lang..*).*(..)) && isActive() {
		System.err.println("Error: unpermitted method call: " + thisJoinPoint.getSignature().getDeclaringType().getName() + "." + thisJoinPoint.getSignature().getName());
		return proceed();
	}
	

	/*
	 * This advice hides all the synthetic methods from the result of Class.getDeclaredMethods() calls.
	 * It is needed to hide the private methods generated by AspectJ.
	 */
	@SuppressAjWarnings
	Method[] around(Object c) : target(c) && call(Method[] Class.getDeclaredMethods()) && withinProject() {
		LinkedList<Method> methods = new LinkedList<>();
		for(Method m : proceed(c)) {
			if (!m.isSynthetic()) {
				methods.add(m);
			}
		}
		return methods.toArray(new Method[0]);
	}
	
	
}