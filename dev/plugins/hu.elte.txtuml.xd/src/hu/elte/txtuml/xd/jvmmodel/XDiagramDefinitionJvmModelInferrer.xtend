/*
 * generated by Xtext 2.10.0
 */
package hu.elte.txtuml.xd.jvmmodel

import com.google.inject.Inject
import hu.elte.txtuml.xd.xDiagramDefinition.Model
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder
import org.eclipse.xtext.naming.IQualifiedNameProvider
import hu.elte.txtuml.xd.xDiagramDefinition.Instruction
import hu.elte.txtuml.xd.xDiagramDefinition.GroupInstruction
import hu.elte.txtuml.xd.xDiagramDefinition.DiagramSignature
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.common.types.JvmType
import org.eclipse.xtext.common.types.JvmGenericType
//import org.eclipse.xtext.common.types.JvmVisibility
import org.eclipse.xtext.xbase.jvmmodel.JvmTypeReferenceBuilder
import hu.elte.txtuml.api.layout.Diagram.NodeGroup
import hu.elte.txtuml.api.layout.ClassDiagram
import hu.elte.txtuml.api.layout.Diagram.Layout
import org.eclipse.xtext.xbase.jvmmodel.JvmTypeReferenceBuilder.Factory
import hu.elte.txtuml.xd.xDiagramDefinition.BinaryIdentifierInstruction
import hu.elte.txtuml.api.layout.Left
import org.eclipse.xtext.xbase.jvmmodel.JvmAnnotationReferenceBuilder
import org.eclipse.xtext.common.types.JvmAnnotationReference
import hu.elte.txtuml.api.layout.Right
import hu.elte.txtuml.api.layout.Above
import hu.elte.txtuml.api.layout.Below
import org.eclipse.xtext.common.types.TypesFactory
import hu.elte.txtuml.xd.xDiagramDefinition.TypeExpression
import hu.elte.txtuml.xd.xDiagramDefinition.PhantomInstruction
import hu.elte.txtuml.api.layout.Diagram.Phantom
import hu.elte.txtuml.xd.xDiagramDefinition.BinaryListInstruction
import hu.elte.txtuml.api.layout.East
import hu.elte.txtuml.api.layout.West
import hu.elte.txtuml.api.layout.North
import hu.elte.txtuml.api.layout.South
import hu.elte.txtuml.xd.xDiagramDefinition.TypeExpressionList
import hu.elte.txtuml.api.layout.Contains

//import hu.elte.txtuml.api.layout.Diagram;

/**
 * <p>Infers a JVM model from the source model.</p> 
 *
 * <p>The JVM model should contain all elements that would appear in the Java code 
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>     
 */
class XDiagramDefinitionJvmModelInferrer extends AbstractModelInferrer {

	/**
	 * convenience API to build and initialize JVM types and their members.
	 */
	@Inject extension JvmTypesBuilder
	@Inject extension IQualifiedNameProvider

	/**
	 * The dispatch method {@code infer} is called for each instance of the
	 * given element's type that is contained in a resource.
	 * 
	 * @param element
	 *            the model to create one or more
	 *            {@link org.eclipse.xtext.common.types.JvmDeclaredType declared
	 *            types} from.
	 * @param acceptor
	 *            each created
	 *            {@link org.eclipse.xtext.common.types.JvmDeclaredType type}
	 *            without a container should be passed to the acceptor in order
	 *            get attached to the current resource. The acceptor's
	 *            {@link IJvmDeclaredTypeAcceptor#accept(org.eclipse.xtext.common.types.JvmDeclaredType)
	 *            accept(..)} method takes the constructed empty type for the
	 *            pre-indexing phase. This one is further initialized in the
	 *            indexing phase using the lambda you pass as the last argument.
	 * @param isPreIndexingPhase
	 *            whether the method is called in a pre-indexing phase, i.e.
	 *            when the global index is not yet fully updated. You must not
	 *            rely on linking using the index if isPreIndexingPhase is
	 *            <code>true</code>.
	 */
//	def dispatch void infer(Model element, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
//		println("infer called with model: " + element);
//		// Here you explain how your model is mapped to Java elements, by writing the actual translation code.
//		
//		// An implementation for the initial hello world example could look like this:
//// 		acceptor.accept(element.toClass("my.company.greeting.MyGreetings")) [
//// 			for (greeting : element.greetings) {
//// 				members += greeting.toMethod("hello" + greeting.name, typeRef(String)) [
//// 					body = '''
////						return "Hello �greeting.name�";
////					'''
////				]
////			}
////		]
//	}

	var currentDiagramClass = null as JvmGenericType;
	var currentLayoutClass = null as JvmGenericType;

	def dispatch void infer(Instruction element, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
		println("infer called with instruction: " + element);		
	}
	
	def dispatch void infer(DiagramSignature element, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
		println("infer called with diagram-signature: " + element);		

		var result = currentDiagramClass = element.toClass(element.findPackageName + element.name)[
			superTypes += ClassDiagram.typeRef();
			documentation = element.documentation;
		];
//		element.associate(result);
		acceptor.accept(result);
		
		var layout = currentLayoutClass = element.toClass("$Layout")[
			superTypes += Layout.typeRef();
			declaringType = currentDiagramClass;
		];
		
	}
	
	def dispatch void infer(GroupInstruction element, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
		println("infer called with groupinstruction: " + element);
		
//		var groupClassName = element.findPackageName + element.findDiagramName + "." + element.name;
		
//		result.extendedClass = new JvmTypeReferenceBuilder().typeRef("hu.elte.txtuml.api.layout.Diagram.NodeGroup");

		var groupType = element.toClass(element.name) [
			documentation = element.documentation;
			declaringType = currentDiagramClass;
			superTypes += NodeGroup.typeRef(); //TODO: not super.NodeGroup, but diagramClass.NodeGroup //new JvmTypeReferenceBuilder().typeRef("hu.elte.txtuml.api.layout.Diagram.NodeGroup");
			annotations += createAnnotationTEList(Contains, "value" -> element.^val);
		]
		acceptor.accept(groupType);
	}
	
	def dispatch void infer(PhantomInstruction element, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase){
		println("infer called with unary-id-instruction: " + element);
		
		acceptor.accept(element.toClass(element.name) [
			documentation = element.documentation;
			declaringType = currentDiagramClass;
			superTypes += Phantom.typeRef();
		]);
	}
	
	def dispatch void infer(BinaryIdentifierInstruction element, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
		println("infer called with bin-id-instruction: " + element);

        var annType = null as Class<?>; 
		annType = switch(element.op){
			case "left-of": Left
			case "right-of": Right
			case "above": Above
			case "below": Below			
		};

		var newAnnotation = annType.createAnnotationTE(
			"val" -> element.^val,
			"from" -> element.of
		);		
				
		this.currentLayoutClass.annotations += newAnnotation;
	}
	
	def dispatch void infer(BinaryListInstruction element, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
		println("infer called with bin-list-instruction: " + element);

        var annType = null as Class<?>; 
		annType = switch(element.op){
			case "east-of": East
			case "west-of": West
			case "north-of": North
			case "south-of": South			
		};
		
		var newAnnotation = annType.createAnnotationTEList(
			"val" -> element.^val,
			"from" -> element.of
		);
		
		element.of.expressions.map[x | x.name.typeRef()]
						
		this.currentLayoutClass.annotations += newAnnotation;
	}
	
	def private createAnnotationTE(Class<?> annotationType, Pair<String, TypeExpression>... params) {
		annotationRef(annotationType) => [ annotationRef |
			for (param : params) {
				annotationRef.explicitValues += TypesFactory::eINSTANCE.createJvmTypeAnnotationValue => [
					values += param.value.name.typeRef();
					if (params.size != 1 || param.key != "value") {
						operation = annotationRef.annotation.declaredOperations.findFirst[it.simpleName == param.key]
					}
				]
			}
		]
	}
	
	def private createAnnotationTEList(Class<?> annotationType, Pair<String, TypeExpressionList>... params) {
		annotationRef(annotationType) => [ annotationRef |
			for (param : params) {
				annotationRef.explicitValues += TypesFactory::eINSTANCE.createJvmTypeAnnotationValue => [
					values += param.value.expressions.map[x | x.name.typeRef()];
					if (params.size != 1 || param.key != "value") {
						operation = annotationRef.annotation.declaredOperations.findFirst[it.simpleName == param.key]
					}
				]
			}
		]
	}
	
	var model = null as Model;

	def Model findModel(EObject element){
		if (model != null) return model;
		
		var result = element;

		while(result != null) {		
			if (result instanceof Model){ 
				return model = result as Model;
			}
			result = result.eContainer;	
		} 
		
		return result as Model;
	}
	
	def String findPackageName(EObject element){
		return (element.findModel.package.name + ".") ?: "";
	}
	
	def String findDiagramName(EObject element){
		return element.findModel.signature.name ?: "";
	}
	
	def JvmType findGenericArg(EObject element){
		return element.findModel.signature.genArg ?: null;
	}
}
