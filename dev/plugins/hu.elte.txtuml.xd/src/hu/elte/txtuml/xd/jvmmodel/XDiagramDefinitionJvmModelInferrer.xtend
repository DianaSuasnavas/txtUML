/*
 * generated by Xtext 2.10.0
 */
package hu.elte.txtuml.xd.jvmmodel

import com.google.inject.Inject
import hu.elte.txtuml.xd.xDiagramDefinition.Model
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder
//import org.eclipse.xtext.naming.IQualifiedNameProvider
import hu.elte.txtuml.xd.xDiagramDefinition.Instruction
import hu.elte.txtuml.xd.xDiagramDefinition.GroupInstruction
import hu.elte.txtuml.xd.xDiagramDefinition.DiagramSignature
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.common.types.JvmType

/**
 * <p>Infers a JVM model from the source model.</p> 
 *
 * <p>The JVM model should contain all elements that would appear in the Java code 
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>     
 */
class XDiagramDefinitionJvmModelInferrer extends AbstractModelInferrer {

	/**
	 * convenience API to build and initialize JVM types and their members.
	 */
	@Inject extension JvmTypesBuilder
//	@Inject extension IQualifiedNameProvider

	/**
	 * The dispatch method {@code infer} is called for each instance of the
	 * given element's type that is contained in a resource.
	 * 
	 * @param element
	 *            the model to create one or more
	 *            {@link org.eclipse.xtext.common.types.JvmDeclaredType declared
	 *            types} from.
	 * @param acceptor
	 *            each created
	 *            {@link org.eclipse.xtext.common.types.JvmDeclaredType type}
	 *            without a container should be passed to the acceptor in order
	 *            get attached to the current resource. The acceptor's
	 *            {@link IJvmDeclaredTypeAcceptor#accept(org.eclipse.xtext.common.types.JvmDeclaredType)
	 *            accept(..)} method takes the constructed empty type for the
	 *            pre-indexing phase. This one is further initialized in the
	 *            indexing phase using the lambda you pass as the last argument.
	 * @param isPreIndexingPhase
	 *            whether the method is called in a pre-indexing phase, i.e.
	 *            when the global index is not yet fully updated. You must not
	 *            rely on linking using the index if isPreIndexingPhase is
	 *            <code>true</code>.
	 */
//	def dispatch void infer(Model element, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
//		println("infer called with model: " + element);
//		// Here you explain how your model is mapped to Java elements, by writing the actual translation code.
//		
//		// An implementation for the initial hello world example could look like this:
//// 		acceptor.accept(element.toClass("my.company.greeting.MyGreetings")) [
//// 			for (greeting : element.greetings) {
//// 				members += greeting.toMethod("hello" + greeting.name, typeRef(String)) [
//// 					body = '''
////						return "Hello �greeting.name�";
////					'''
////				]
////			}
////		]
//	}


	def dispatch void infer(Instruction element, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
		println("infer called with instruction: " + element);		
	}
	
	def dispatch void infer(DiagramSignature element, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
		println("infer called with diagram-signature: " + element);		

		var result = element.toClass(element.findPackageName + element.name);
		element.associate(result);
		acceptor.accept(result);
	}
	
	def dispatch void infer(GroupInstruction element, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
		println("infer called with groupinstruction: " + element);
		
		var groupFQN = element.findPackageName + element.findDiagramName + "." + element.name;
		
		var result = element.toClass(groupFQN);
		element.associate(result);
		acceptor.accept(result);
	}
	
	var model = null as Model;

	def Model findModel(EObject element){
		if (model != null) return model;
		
		var result = element;

		while(result != null) {		
			if (result instanceof Model){ 
				return model = result as Model;
			}
			result = result.eContainer;	
		} 
		
		return result as Model;
	}
	
	def String findPackageName(EObject element){
		return (element.findModel.package.name + ".") ?: "";
	}
	
	def String findDiagramName(EObject element){
		return element.findModel.signature.name ?: "";
	}
	
	def JvmType findGenericArg(EObject element){
		return element.findModel.signature.genArg ?: null;
	}
}
