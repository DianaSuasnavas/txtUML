grammar hu.elte.txtuml.xd.XDiagramDefinition with org.eclipse.xtext.xbase.Xbase
generate xDiagramDefinition "http://www.elte.hu/txtuml/xd/XDiagramDefinition"

import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

Model:
	(package = PackageDeclaration)?
	(imports = XImportSection)?
	signature = DiagramSignature '{' (instructions += Instruction)* '}'
;

// environment

PackageDeclaration:
    'package' name=QualifiedName ';'
;

// diagram instructions

DiagramSignature :
	// generic types
	diagramType = "state-machine-diagram" name=ID "for" genArg=[types::JvmType|QualifiedName] |
	// non-generic types
	diagramType = "class-diagram" name=ID
;

BinaryIdentifierInstruction:
	val = WrappedTypeExpression 
	op = ("left-of" | "right-of" | "above" | "below") 
	of = WrappedTypeExpression
;

BinaryListInstruction:
	val = WrappedTypeExpressionList
	op = ("east-of" | "west-of" | "north-of" | "south-of")
	of = WrappedTypeExpressionList
;

PhantomInstruction:
	op = ("phantom")
	name=ID
;

UnaryListInstruction:
	op = ("topmost" | "leftmost" | "rightmost" | "bottommost" | "row" | "column") 
	val = WrappedTypeExpressionList
;

GroupInstruction:
	op = ("group") 
	name=ID 
	val = WrappedTypeExpressionList
;

UnaryNumberInstruction:
	op = ("spacing") 
	val = WrappedNumericExpression
;

DiamondArgName:
	"top" | "right" | "bottom" | "left"
;

DiamondInstruction:
	op = "diamond" args = WrappedArgumentExpressionList
//	(
//		// TODO: this parameter list check should be moved to the validation phase
//		args+=TypeExpression ',' args+=TypeExpression ',' args+=TypeExpression ',' args+=TypeExpression |
//		'{' args+=TypeExpression ',' args+=TypeExpression ',' args+=TypeExpression ',' args+=TypeExpression '}' |
//		argNames+=DiamondArgName ':' args+=TypeExpression (',' argNames+=DiamondArgName ':' args+=TypeExpression)* |
//		'{' argNames+=DiamondArgName ':' args+=TypeExpression (',' argNames+=DiamondArgName ':' args+=TypeExpression)* '}'
//	)
;

Instruction:
	(
		BinaryIdentifierInstruction |
		BinaryListInstruction |
		PhantomInstruction |
		UnaryListInstruction |
		GroupInstruction |
		UnaryNumberInstruction |
		DiamondInstruction
	)
	";"
;

// Argument & list types

WrappedTypeExpressionList : 
	wrapped = TypeExpressionList | '{' wrapped = TypeExpressionList '}'
;

TypeExpressionList :
	expressions += TypeExpression (',' expressions += TypeExpression)*
;

WrappedTypeExpression : 
	wrapped = TypeExpression | '{' wrapped = TypeExpression '}'
;

TypeExpression :
	phantom="phantom" | 
	name=[types::JvmType|QualifiedName]
;

WrappedArgumentExpressionList : 
	wrapped = ArgumentExpressionList | '{' wrapped = ArgumentExpressionList '}'
;

ArgumentExpressionList: 
	expressions += ArgumentExpression (',' expressions += ArgumentExpression)*
;

ArgumentExpression: 
	argName = ID ':' expression = TypeExpression | 
	expression = TypeExpression
;

WrappedNumericExpression : wrapped = NumericExpression | '{' wrapped = NumericExpression '}';

NumericExpression :
	Number'%'?
;
