/*
 * generated by Xtext
 */
package hu.elte.txtuml.xtxtuml.ui.outline

import hu.elte.txtuml.xtxtuml.xtxtUML.TUAttribute
import hu.elte.txtuml.xtxtuml.xtxtUML.TUOperation
import hu.elte.txtuml.xtxtuml.xtxtUML.TUFile
import hu.elte.txtuml.xtxtuml.xtxtUML.TUExecution
import hu.elte.txtuml.xtxtuml.xtxtUML.TUSignalAttribute
import hu.elte.txtuml.xtxtuml.xtxtUML.TUEntryOrExitActivity
import hu.elte.txtuml.xtxtuml.xtxtUML.TUTransition
import hu.elte.txtuml.xtxtuml.xtxtUML.TUAssociationEnd
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode
import hu.elte.txtuml.xtxtuml.xtxtUML.TUConstructor

/**
 * Customization of the default outline structure.
 *
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#outline
 */
class XtxtUMLOutlineTreeProvider extends org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider {
	
	def _isLeaf(TUFile op) {
		true
	}
	
	def _isLeaf(TUExecution exec) {
		true
	}
	
	def _isLeaf(TUSignalAttribute sAttr) {
		true
	}
	
	def _isLeaf(TUAttribute attr) {
		true
	}
	
	def _isLeaf(TUConstructor ctor) {
		true
	}
	
	def _isLeaf(TUOperation op) {
		true
	}
	
	def _isLeaf(TUEntryOrExitActivity act) {
		true
	}
	
	def _isLeaf(TUTransition trans) { // TODO refine
		true
	}

	def _isLeaf(TUAssociationEnd transEnd) {
		true
	}
	
	def _createChildren(DocumentRootNode rootNode, TUFile file) {
		createNode(rootNode, file);
		for (element : file.elements) {
			createNode(rootNode, element);
		}
	}
	
}
