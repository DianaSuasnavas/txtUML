package hu.elte.txtuml.examples.train;

model XTrain {
	class Gearbox {
		initial Init;
		
		state Neutral;
		composite Forwards {
			initial FInit;
			state F1;
			state F2;
		}

		transition FInit_F1 {
			from hu.elte.txtuml.examples.train.XTrain.Gearbox.Forwards.FInit;
			to hu.elte.txtuml.examples.train.XTrain.Gearbox.Forwards.F1;
		}

		transition F1_F2 {
			from hu.elte.txtuml.examples.train.XTrain.Gearbox.Forwards.F1;
			to hu.elte.txtuml.examples.train.XTrain.Gearbox.Forwards.F2;
			trigger Forward;
		}

		transition F2_F1 {
			from hu.elte.txtuml.examples.train.XTrain.Gearbox.Forwards.F2;
			to hu.elte.txtuml.examples.train.XTrain.Gearbox.Forwards.F1;
			trigger Forward;
		}

		composite Backwards {
			initial BInit;
			state B1;
			state B2;
		}
		
		transition BInit_B1 {
			from hu.elte.txtuml.examples.train.XTrain.Gearbox.Backwards.BInit;
			to hu.elte.txtuml.examples.train.XTrain.Gearbox.Backwards.B1;
		}
		
		transition B1_B2 {
			from hu.elte.txtuml.examples.train.XTrain.Gearbox.Backwards.B1;
			to hu.elte.txtuml.examples.train.XTrain.Gearbox.Backwards.B2;
			trigger Backward;
		}

		transition B2_B1 {
			from hu.elte.txtuml.examples.train.XTrain.Gearbox.Backwards.B2;
			to hu.elte.txtuml.examples.train.XTrain.Gearbox.Backwards.B1;
			trigger hu.elte.txtuml.examples.train.XTrain.Backward;
		}

		transition Init_Neutral {
			from Init;
			to Neutral;
		}

		transition Neutral_Forwards {
			from Neutral;
			to Forwards;
			trigger Forward;
			effect {
				startEngineOp();
			}
		}

		transition Neutral_Backwards {
			from Neutral;
			to Backwards;
			trigger Backward;
			effect {
				startEngineOp();
			}
		}
		
		transition Forwards_Neutral {
			from Forwards;
			to Neutral;
			trigger Backward;
			effect {
				hu.elte.txtuml.examples.train.XTrain.Engine e = Gearbox.this->hu::elte::txtuml::examples::train::XTrain::GE::e.selectAny();
				send new EngineOff() to e;
				hu.elte.txtuml.examples.train.XTrain.Lamp l = Gearbox.this->hu::elte::txtuml::examples::train::XTrain::GL::l.selectAny();
				send new LightOff() to l;
			}
		}

		transition Backwards_Neutral {
			from Backwards;
			to Neutral;
			trigger Forward;
			effect {
				hu.elte.txtuml.examples.train.XTrain.Engine e = Gearbox.this->hu::elte::txtuml::examples::train::XTrain::GE::e.selectAny();
				send new EngineOff() to e;
				hu.elte.txtuml.examples.train.XTrain.Lamp l = Gearbox.this->hu::elte::txtuml::examples::train::XTrain::GL::l.selectAny();
				send new LightOff() to l;
			}			
		}
		
		void startEngineOp() {
			hu.elte.txtuml.examples.train.XTrain.Engine e = Gearbox.this->hu::elte::txtuml::examples::train::XTrain::GE::e.selectAny();
			send new EngineOn() to e;
		}
	}
	
	class Engine {
		initial Init;
		state Stopped;
		state Working;
		
		transition Init_Stopped {
			from Init;
			to Stopped;
		}

		transition Stopped_Working {
			from Stopped;
			to Working;
			trigger EngineOn;
		}

		transition Working_Stopped {
			from Working;
			to Stopped;
			trigger EngineOff;
		}
	}

	class Lamp {
		initial Init;
		state Dark;
		state Light;
		
		transition Init_Dark {
			from Init;
			to Dark;
		}

		transition Dark_Light {
			from Dark;
			to Light;
			trigger Light;
		}

		transition Light_Dark {
			from Light;
			to Dark;
			trigger Light;
		}

		transition Light_Dark2 {
			from Light;
			to Dark;
			trigger LightOff;
		}
	}
	
	signal Forward;
	signal Backward;
	signal Light;
	
	signal LightOff;
	signal EngineOn;
	signal EngineOff;
	
	association GE {
		1 Gearbox g;
		1 Engine e;
	}

	association GL {
		1 Gearbox g;
		1 Lamp l;
	}

	association LE {
		1 Lamp l;
		1 Engine e;
	}			
}
