package nuclearpower.model;

import nuclearpower.model.assocination.PanelBatteryComposition;

class Battery {
	
	public boolean hasCapacity () {
		return capacity > 0;
	}
	
	initial Init;
	state Passive;
	state Loading;
	state ProvidesEnergy;
	
	transition Initialize {
		from Init;
		to Passive;
	}
	
	transition StartCharging {
		from Passive;
		to Loading;
		trigger SunyWather;
		effect {
			capacity++;
			log ("Capacity of battery: " + capacity);
		}
		guard (capacity < maxCapacity);
	}
	
	transition ChargingFromSunEnergy {
		from Loading;
		to Loading;
		trigger SunyWather;
		effect {
			capacity++;
			log ("Capacity of battery: " + capacity);
		}
		guard (capacity < maxCapacity);
	}
	
	transition FinishCharging {
		from Loading;
		to Passive;
		trigger SunyWather;
		guard (capacity == maxCapacity);
	}
	
	transition WatherBecomeCloudy {
		from Loading;
		to Passive;
		trigger CouldyWather;
	}
	
	
	
	transition StartUsing {
		from Passive;
		to ProvidesEnergy;
		trigger UsingBattery;
		guard (capacity > 0);
		effect {
			capacity--;
			log ("Capacity of battery: " + capacity);
		}
	}
	
	transition ProvidingEnergy {
		from ProvidesEnergy;
		to ProvidesEnergy;
		trigger UsingBattery;
		guard (capacity > 1);
		effect {
			capacity--;
			log ("Capacity of battery: " + capacity);
					
		}
	}
	
	transition RunningOutFromEnergy {
		from ProvidesEnergy;
		to Passive;
		trigger UsingBattery;
		guard (capacity == 1);
		effect {
			capacity--;
			SolarPanel panel = this->(PanelBatteryComposition.panel).selectAny();
			send new BatteryRunOutFromEnergy() to panel;
			log ("Capacity of battery: " + capacity);
			
		}
	}
	
	public Battery (int maxCapacity) {
		this.maxCapacity = maxCapacity;
		capacity = 0;
	}
	
	private int capacity;
	private int maxCapacity;
}
