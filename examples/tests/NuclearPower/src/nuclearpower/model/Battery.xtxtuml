package nuclearpower.model;

import nuclearpower.model.assocination.BatteryUIAssociation;
import nuclearpower.model.assocination.PanelBatteryComposition;
import hu.elte.txtuml.api.stdlib.timers.Timer;

class Battery {
	
	public boolean hasCapacity () {
		return capacity > 0;
	}
	
	initial Init;
	state Passive{
		entry{
			this->(BatteryUIAssociation.ui).selectAny().gui.batteryStateChanged("Passive");
		}
	};
	state Charging{
		entry{
			this->(BatteryUIAssociation.ui).selectAny().gui.batteryStateChanged("Charging");
		}
	};
	state ProvidesEnergy{
		entry{
			this->(BatteryUIAssociation.ui).selectAny().gui.batteryStateChanged("Provides Energy");
		}
	};
	
	transition Initialize {
		from Init;
		to Passive;
		effect{
			this->(BatteryUIAssociation.ui).selectAny().gui.batteryCapacityChanged(capacity);
		}
	}
	
	transition StartCharging {
		from Passive;
		to Charging;
		trigger ChargingBattery;
		effect{
			Timer.start(this, new ChargingTick(), 250);
		}
	}
	
	transition chargeOneUnit {
		from Charging;
		to Charging;
		trigger ChargingTick;
		effect {
			capacity++;
			Timer.start(this, new ChargingTick(), 250);
			this->(BatteryUIAssociation.ui).selectAny().gui.batteryCapacityChanged(capacity);
		}
		guard (capacity < maxCapacity);
	}
	
	transition stopCharging {
		from Charging;
		to Passive;
		trigger StopChargingBattery;
	}
	
	transition StartUsing {
		from Passive;
		to ProvidesEnergy;
		trigger UsingBattery;
		guard (hasCapacity());
		effect{
			Timer.start(this, new UsingTick(), 250);
		}
	}
	
	transition useOneUnit {
		from ProvidesEnergy;
		to ProvidesEnergy;
		trigger UsingTick;
		guard (capacity > 1); // capacity == 1 handled in "RunningOutOfEnergy"
		effect {
			capacity--;	
			Timer.start(this, new UsingTick(), 250);
			this->(BatteryUIAssociation.ui).selectAny().gui.batteryCapacityChanged(capacity);		
		}
	}
	
	transition stopUsing {
		from ProvidesEnergy;
		to Passive;
		trigger StopUsingBattery;
	}
	
	transition RunningOutOfEnergy {
		from ProvidesEnergy;
		to Passive;
		trigger UsingTick;
		guard (capacity == 1);
		effect {
			capacity--;
			SolarPanel panel = this->(PanelBatteryComposition.panel).selectAny();
			send new BatteryRunOutOfEnergy() to panel;
			this->(BatteryUIAssociation.ui).selectAny().gui.batteryCapacityChanged(capacity);
		}
	}
	
	public Battery (int maxCapacity) {
		this.maxCapacity = maxCapacity;
		capacity = 0;
	}
	
	private int capacity;
	private int maxCapacity;
}

signal ChargingTick;
signal UsingTick;
