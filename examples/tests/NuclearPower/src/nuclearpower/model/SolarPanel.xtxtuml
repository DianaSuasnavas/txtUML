package nuclearpower.model;

import nuclearpower.model.assocination.PanelBatteryComposition;
import nuclearpower.model.assocination.PlantPanelAssociation;
import hu.elte.txtuml.api.stdlib.timers.Timer;
import nuclearpower.model.assocination.PanelUIAssociation;
import nuclearpower.model.assocination.BatteryUIAssociation;
import nuclearpower.model.assocination.PanelWeatherAssociation;

signal ChargingTick;
signal UsingTick;

class SolarPanel {
	
	private Timer chargingTimer;
	private Timer usingBatteryTimer;
	
	initial Init;
	state Warhousing {
		entry {
			chargingTimer = Timer.start(this, new ChargingTick(), 1000);
			this->(PanelUIAssociation.ui).selectAny().gui.panelStateChanged("Warehousing");
		}
	}
	state NotWarhousing {
		entry {
			chargingTimer = Timer.start(this, new ChargingTick(), 1000);
			usingBatteryTimer = Timer.start(this, new UsingTick(), 1000);
			this->(PanelUIAssociation.ui).selectAny().gui.panelStateChanged("Not Warehousing");
		}
	}
	
	transition Initialize {
		from Init;
		to Warhousing;
	}
	
	transition ChangeToNotWarhousing {
		from Warhousing;
		to NotWarhousing;
		trigger ChangeToNotWarhousingPressed;
		effect {
			NuclearPowerPlant plant = this->(PlantPanelAssociation.plant).selectAny();
			Battery battery = this->(PanelBatteryComposition.battery).selectAny();
			send new ReduceProductionVolume() to plant;
			send new StopChargingBattery() to battery;
		}
		guard (this->(PanelBatteryComposition.battery).selectAny().hasCapacity ());
	}
	
	transition ChangeToWarhosing {
		from NotWarhousing;
		to Warhousing;
		trigger ChangeToWarhousingPressed;
		effect {
			NuclearPowerPlant plant = this->(PlantPanelAssociation.plant).selectAny();
			send new IncraseProductionVolume() to plant;
		}
	}
	
	transition RunningOutFromEnergy {
		from NotWarhousing;
		to Warhousing;
		trigger BatteryRunOutFromEnergy;
		effect {
			NuclearPowerPlant plant = this->(PlantPanelAssociation.plant).selectAny();
			send new IncraseProductionVolume() to plant;
		}
	}
	
	transition ChargingBatteryInSunnyWatherWhenWarhousing {
			from Warhousing;
			to Warhousing;
			trigger ChargingTick;
			effect {
				Battery battery = this->(PanelBatteryComposition.battery).selectAny();
				send new ChargingBattery() to battery;
			}
			guard (this->(PanelWeatherAssociation.weather).selectAny().isSunny());
	}
	
	transition WatherBecameSunnyWhenWarhousing {
		from Warhousing;
		to Warhousing;
		trigger WeatherChanged;
		effect {		
				Battery battery = this->(PanelBatteryComposition.battery).selectAny();
				send new ChargingBattery() to battery;
		}
		guard (!this->(PanelWeatherAssociation.weather).selectAny().isSunny());	
	}
		
	
	transition WatherBecameCloudyWhenWarhousing {
		from Warhousing;
		to Warhousing;
		trigger WeatherChanged;
		effect {
			Battery battery = this->(PanelBatteryComposition.battery).selectAny();
			send new StopChargingBattery() to battery;
		}
		guard (this->(PanelWeatherAssociation.weather).selectAny().isSunny());
	}	
	
	transition WatherBecameCloudyWhenNotWarhousing {
		from NotWarhousing;
		to NotWarhousing;
		trigger WeatherChanged;
		effect {
			Battery battery = this->(PanelBatteryComposition.battery).selectAny();
			send new StopChargingBattery() to battery;
		}
		guard (this->(PanelWeatherAssociation.weather).selectAny().isSunny());
	}
	
	transition UsingBatteryWhenNotWarhousing {
		from NotWarhousing;
		to NotWarhousing;
		trigger UsingTick;
		effect {
			Battery battery = this->(PanelBatteryComposition.battery).selectAny();
			send new UsingBattery() to battery;
		}
		guard (this->(PlantPanelAssociation.plant).selectAny().isInOperation())
	}
}