package nuclearpower.model;

import nuclearpower.model.assocination.PanelBatteryComposition;
import nuclearpower.model.assocination.PlantPanelAssociation;
import hu.elte.txtuml.api.stdlib.timers.Timer;
import nuclearpower.model.assocination.PanelUIAssociation;
import nuclearpower.model.assocination.BatteryUIAssociation;
import nuclearpower.model.assocination.PanelWeatherAssociation;

signal ChargingTick;

signal UsingTick;

class SolarPanel {

	initial Init;

	state NotInOperation {
		entry {
			this->(PanelUIAssociation.ui).selectAny().gui.panelStateChanged("Not in operation");
		}
	}

	composite InOperation {
		initial Init;
		
		state ProducesPower {
			entry {
				this->(PanelUIAssociation.ui).selectAny().gui.panelStateChanged("Produces power");
			}
		}
		
		state Passive {
			entry {
				this->(PanelUIAssociation.ui).selectAny().gui.panelStateChanged("Passive");
			}
		}
		
		transition producePower {
			from Passive;
			to ProducesPower;
			trigger SwitchSolarPanel;
			effect {
				send new ReduceProductionVolume() to this->(PlantPanelAssociation.plant).selectAny();
			}
			// when the power plant is off, there is no need for electricity
			guard ( this->(PlantPanelAssociation.plant).selectAny().isInOperation() )
		}
		
		transition stopProducingPower {
			from ProducesPower;
			to Passive;
			trigger SwitchSolarPanel;
			effect {
				send new IncreaseProductionVolume() to this->(PlantPanelAssociation.plant).selectAny();
			}
		}
		
		transition initialtrans {
			from Init;
			to Passive;
		}
	}

	transition initialTrans {
		from Init;
		to NotInOperation;
	}

	transition weatherBecameRainy {
		from InOperation;
		to NotInOperation;
		trigger WeatherChanged;
		effect {
			send new IncreaseProductionVolume() to this->(PlantPanelAssociation.plant).selectAny();
		}
	}

	transition weatherBacameSunny {
		from NotInOperation;
		to InOperation;
		trigger WeatherChanged;
	}
}

