package nuclearpower.model;

import nuclearpower.model.assocination.PanelBatteryComposition;
import nuclearpower.model.assocination.PlantPanelAssociation;
import nuclearpower.model.assocination.PanelUIAssociation;
import nuclearpower.model.assocination.BatteryUIAssociation;
import nuclearpower.model.assocination.PanelWeatherAssociation;

class SolarPanel {

	initial Init;

	composite NotInOperation {
		initial Init;
		state UsesBattery {
			entry {
				this->(PanelUIAssociation.ui).selectAny().gui.panelStateChanged("Uses Battery");
			}
		}
		state Passive {
			entry {
				this->(PanelUIAssociation.ui).selectAny().gui.panelStateChanged("Not in operation");
			}
		}
		transition initialTrans {
			from Init;
			to Passive;
		}
		
		transition useBattery {
			from Passive;
			to UsesBattery;
			trigger UsePanelBattery;
			effect {
				send new ReduceProductionVolume() to this->(PlantPanelAssociation.plant).selectAny();
				send new UsingBattery() to this->(PanelBatteryComposition.battery).selectAny();
			}
			// when the power plant is off, there is no need for electricity
			guard ( this->(PlantPanelAssociation.plant).selectAny().isInOperation() &&
				this->(PanelBatteryComposition.battery).selectAny().hasCapacity() )
		}
		
		transition stopUsingBattery {
			from UsesBattery;
			to Passive;
			trigger StopUsingPanelBattery;
			effect {
				send new IncreaseProductionVolume() to this->(PlantPanelAssociation.plant).selectAny();
				send new StopUsingBattery() to this->(PanelBatteryComposition.battery).selectAny();
			}
		}
		
		transition batteryRunOutOfEnergy {
			from UsesBattery;
			to Passive;
			trigger BatteryRunOutOfEnergy;
			effect {
				send new IncreaseProductionVolume() to this->(PlantPanelAssociation.plant).selectAny();
			}
		}
		
		transition noMoreEnergyNeeded{
			from UsesBattery;
			to Passive;
			trigger NoEnergyNeeded;
			effect{
				send new StopUsingBattery() to this->(PanelBatteryComposition.battery).selectAny();
			}
		}
		
		transition turnOff{
			from UsesBattery;
			to Passive;
			trigger StopUsingPanel;
			effect{
				send new StopUsingBattery() to this->(PanelBatteryComposition.battery).selectAny();
				send new IncreaseProductionVolume() to this->(PlantPanelAssociation.plant).selectAny();
			}
		}
		
		exit{
			send new StopUsingBattery() to this->(PanelBatteryComposition.battery).selectAny();
		}
	}

	composite InOperation {
		initial Init;
		state ProducesPower {
			entry {
				this->(PanelUIAssociation.ui).selectAny().gui.panelStateChanged("Produces power");
			}
		}
		
		state Passive {
			entry {
				this->(PanelUIAssociation.ui).selectAny().gui.panelStateChanged("Passive");
			}
		}
		
		state ChargesBattery{
			entry {
				this->(PanelUIAssociation.ui).selectAny().gui.panelStateChanged("Charges Battery");
			}
		}
		
		transition producePower {
			from Passive;
			to ProducesPower;
			trigger ProduceEnergyWithPanel;
			effect {
				send new ReduceProductionVolume() to this->(PlantPanelAssociation.plant).selectAny();
			}
			// when the power plant is off, there is no need for electricity
			guard ( this->(PlantPanelAssociation.plant).selectAny().isInOperation() )
		}
		
		transition stopProducingPower {
			from ProducesPower;
			to Passive;
			trigger NoEnergyNeeded;
			effect {
				send new IncreaseProductionVolume() to this->(PlantPanelAssociation.plant).selectAny();
			}
		}
		
		
		transition turnOff{
			from ProducesPower;
			to Passive;
			trigger StopUsingPanel;
			effect{
				send new IncreaseProductionVolume() to this->(PlantPanelAssociation.plant).selectAny();
			}
		}
		
		transition stopCharginBattery {
			from ChargesBattery;
			to Passive;
			trigger StopUsingPanel;
			effect{
				send new StopChargingBattery() to this->(PanelBatteryComposition.battery).selectAny();
			}
		}
		
		transition CharginBatteryFromEnergyProduction {
			from ChargesBattery;
			to ProducesPower;
			trigger ProduceEnergyWithPanel;
			effect{
				send new StopChargingBattery() to this->(PanelBatteryComposition.battery).selectAny();
				send new ReduceProductionVolume() to this->(PlantPanelAssociation.plant).selectAny();
			}
			// when the power plant is off, there is no need for electricity
			guard ( this->(PlantPanelAssociation.plant).selectAny().isInOperation() )
		}
		
		transition chargeBatteryFromEnergyProduction{
			from ProducesPower;
			to ChargesBattery;
			trigger ChargePanelBattery;
			effect{
				send new ChargingBattery() to this->(PanelBatteryComposition.battery).selectAny();
				send new IncreaseProductionVolume() to this->(PlantPanelAssociation.plant).selectAny();
			}
		}
		
		transition chargeBatteryFromPassive{
			from Passive;
			to ChargesBattery;
			trigger ChargePanelBattery;
			effect{
				send new ChargingBattery() to this->(PanelBatteryComposition.battery).selectAny();
			}
		}
		
		transition initialtrans {
			from Init;
			to Passive;
		}
		
		exit{
			send new StopChargingBattery() to this->(PanelBatteryComposition.battery).selectAny();
		}
	}

	transition initialTrans {
		from Init;
		to NotInOperation;
	}

	transition weatherBecameRainy {
		from InOperation;
		to NotInOperation;
		trigger WeatherChanged;
		effect {
			send new IncreaseProductionVolume() to this->(PlantPanelAssociation.plant).selectAny();
		}
	}

	transition weatherBacameSunny {
		from NotInOperation;
		to InOperation;
		trigger WeatherChanged;
	}

}

