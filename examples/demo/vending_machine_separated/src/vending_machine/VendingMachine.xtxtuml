package vending_machine;

import hu.elte.txtuml.api.stdlib.timers.Timer;

class VendingMachine {

	java.lang.String message;

	Timer timerHandle;

	public VendingMachine () {
		message = "";
	}

	public java.lang.String getMessage() {
		return message;
	}

	public void updateMessage(java.lang.String newMessage) {
		message = newMessage;
	}

	// state machine states
	initial Init;

	state Idle {
		entry {
			if (VendingMachine.this->(WorkTogether.theCashRegister).selectAny().howMuchIsInside() == 0) {
				message = "Online";
			} else {
				message = "Inserted: " + VendingMachine.this->(WorkTogether.theCashRegister).selectAny().howMuchIsInside();
			}
		}
	}

	state ShowingPrice {
		entry {
			Drink selectedDrink;
			for (Drink d : VendingMachine.this->(Serve.drinks)) {
				if (d.name.equals(trigger.name)) {
					selectedDrink = d;
				}
			}
			if (selectedDrink.onStock()) {
				message = "<html><div style='text-align: center;'>" + selectedDrink.getName() + "<br>costs " +  selectedDrink.getPrice() + "</html>";
			} else {
				message = "Out of stock";
			}
			timerHandle = Timer.start(this, new done(), 1000);
		}
	}

	state Vending {
		entry {
			Drink selectedDrink;
			CashRegister register = VendingMachine.this->(WorkTogether.theCashRegister).selectAny();
			
			for (Drink d : VendingMachine.this->(Serve.drinks)) {
				if (d.name.equals(trigger.name)) {
					selectedDrink = d;
				}
			}
			
			if (selectedDrink.getPrice() <= register.howMuchIsInside()) {
				send new request() to selectedDrink;
			} else {
				message = "Money not enough";
			}
			timerHandle = Timer.start(this, new done(), 1000);
		}
	}

	// state machine transitions
	transition initalize {
		from Init;
		to Idle;
	}

	transition showPrice {
		from Idle;
		to ShowingPrice;
		trigger drinkChosen;
		guard ( VendingMachine.this->(WorkTogether.theCashRegister).selectAny().howMuchIsInside() == 0);
	}

	transition hidePrice {
		from ShowingPrice;
		to Idle;
		trigger done;
		effect {
			timerHandle.cancel();
		}
	}

	transition startVending {
		from Idle;
		to Vending;
		trigger drinkChosen;
		guard ( VendingMachine.this->(WorkTogether.theCashRegister).selectAny().howMuchIsInside() != 0);
	}

	transition doneVending {
		from Vending;
		to Idle;
		trigger done;
		effect {
			timerHandle.cancel();
		}
	}

}

