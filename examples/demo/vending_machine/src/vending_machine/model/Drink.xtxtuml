package vending_machine.model;

import hu.elte.txtuml.api.stdlib.timers.Timer;

class Drink {

	int price;

	int quantity;

	java.lang.String name;

	Timer timerHandle;

	public Drink(int p, int q, java.lang.String n) {
		price = p;
		quantity = q;
		name = n;
	}

	public int getPrice() {
		return price;
	}

	public java.lang.String getName() {
		return name;
	}

	public boolean onStock() {
		return quantity > 0;
	}

	// state machine states
	initial Init;

	choice isThereMore;

	state Available;

	state OutOfStock;

	state Giving {
		entry {
			quantity--;
			Drink.this->(Serve.theMachine).selectAny().updateMessage("<html><div style='text-align: center;'>Done! Take your<br>" + name + "</html>");
			timerHandle = Timer.start(this, new done(), 1000);
		}
	}

	state Refilling {
		entry {
			Drink.this->(Serve.theMachine).selectAny().updateMessage("<html><div style='text-align: center;'>Refilling<br>" + name + "</html>");
			timerHandle = Timer.start(this, new done(), 1000);
		}
	}

	state Loading {
		entry {
			if (quantity <= 0) {
				quantity = 0;
				timerHandle = Timer.start(this, new allGone(), 1000);
			} else {
				timerHandle = Timer.start(this, new done(), 1000);
			}
		}
	}

	state NotGiving {
		entry {
			Drink.this->(Serve.theMachine).selectAny().updateMessage("Out of stock");
			timerHandle = Timer.start(this, new done(), 1000);
		}
	}

	// state machine transitions
	transition Initialize {
		from Init;
		to Available;
	}

	transition Give {
		from Available;
		to Giving;
		trigger request;
	}

	transition DoneGiving {
		from Giving;
		to isThereMore;
		trigger done;
		effect {
			timerHandle.cancel();
			CashRegister register = this->(Serve.theMachine).selectAny()->(WorkTogether.theCashRegister).selectAny();
			send new giveBackCash(register.howMuchIsInside() - price) to register;
		}
	}

	transition ThereIs {
		from isThereMore;
		to Available;
		guard( quantity > 0);
	}

	transition ThereIsNot {
		from isThereMore;
		to OutOfStock;
		guard( quantity == 0);
	}

	transition Refill {
		from OutOfStock;
		to Refilling;
		trigger refill;
		effect {
				if (quantity + trigger.quantity < 50) {
					quantity += trigger.quantity;
				} else {
					quantity = 50;
				}
		}
		guard (trigger.quantity > 0);
	}

	transition DoneRefilling {
		from Refilling;
		to isThereMore;
		trigger done;
		effect {
			Drink.this->(Serve.theMachine).selectAny().updateMessage("Online");
			timerHandle.cancel();
		}
	}

	transition TakeAll {
		from Loading;
		to OutOfStock;
		trigger allGone;
		effect {
			Drink.this->(Serve.theMachine).selectAny().updateMessage("Online");
			timerHandle.cancel();
		}
	}

	transition LoadMore {
		from Available;
		to Loading;
		trigger refill;
		effect {
			if (quantity + trigger.quantity < 50) {
				quantity += trigger.quantity;
			} else {
				quantity = 50;
			}
			if (trigger.quantity >= 0) {
				Drink.this->(Serve.theMachine).selectAny().updateMessage("<html><div style='text-align: center;'>Loading more<br>" + name + "</html>");
			} else {
				Drink.this->(Serve.theMachine).selectAny().updateMessage("<html><div style='text-align: center;'>Taking some<br>" + name + "</html>");
			}
		}
	}

	transition DoneLoading {
		from Loading;
		to isThereMore;
		trigger done;
		effect {
			Drink.this->(Serve.theMachine).selectAny().updateMessage("Online");
			timerHandle.cancel();
		}
	}

	transition NotToGive {
		from OutOfStock;
		to NotGiving;
		trigger request;
	}

	transition ReturnToOutOfStock {
		from NotGiving;
		to OutOfStock;
		trigger done;
		effect {
			timerHandle.cancel();
		}
	}

}

